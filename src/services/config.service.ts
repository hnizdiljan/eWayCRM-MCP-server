import { config } from 'dotenv';
import { createPasswordHash, isPasswordHash } from '../utils/crypto.utils';

// Naƒçten√≠ environment promƒõnn√Ωch
config();

export interface AppConfig {
  // eWay-CRM konfigurace
  eway: {
    apiUrl: string;
    username?: string; // Username pot≈ôebn√Ω i pro OAuth2
    // OAuth2 konfigurace
    oauth?: {
      clientId: string;
      clientSecret: string;
      redirectUri: string;
    };
    // Legacy autentizace
    legacy?: {
      username: string;
      passwordHash: string;
    };
    authMethod: 'oauth2' | 'legacy';
  };
  
  // Server konfigurace
  server: {
    port: number;
  };
  
  // Aplikaƒçn√≠ konfigurace
  app: {
    version: string;
    clientMachineId: string;
    clientMachineName: string;
    nodeEnv: string;
  };
  
  // Logov√°n√≠
  logging: {
    level: string;
  };
}

class ConfigService {
  private readonly _config: AppConfig;

  constructor() {
    // Zjist√≠me, jakou metodu autentizace pou≈æ√≠t
    const authMethod = this.determineAuthMethod();
    
    this._config = {
      eway: {
        apiUrl: this.getRequiredEnv('EWAY_API_URL'),
        authMethod,
        // Username je pot≈ôebn√Ω i pro OAuth2
        ...(process.env.EWAY_USERNAME ? { username: process.env.EWAY_USERNAME } : {}),
        // Naƒçteme OAuth2 pokud jsou dostupn√© promƒõnn√©
        ...(process.env.EWAY_CLIENT_ID && process.env.EWAY_CLIENT_SECRET ? {
          oauth: {
            clientId: process.env.EWAY_CLIENT_ID,
            clientSecret: process.env.EWAY_CLIENT_SECRET,
            redirectUri: process.env.EWAY_REDIRECT_URI || 'http://127.0.0.1:7777',
          }
        } : {}),
        // Naƒçteme legacy pokud jsou dostupn√© promƒõnn√© (jako fallback)
        ...(process.env.EWAY_USERNAME && (process.env.EWAY_PASSWORD || process.env.EWAY_PASSWORD_HASH) ? {
          legacy: {
            username: process.env.EWAY_USERNAME,
            passwordHash: this.getPasswordValue(),
          }
        } : {}),
      },
      server: {
        port: parseInt(process.env.MCP_PORT || '3000', 10),
      },
      app: {
        version: process.env.APP_VERSION || 'MCP-Server-1.0',
        clientMachineId: process.env.CLIENT_MACHINE_ID || 'AA:BB:CC:DD:EE:FF',
        clientMachineName: process.env.CLIENT_MACHINE_NAME || 'MCP-Server',
        nodeEnv: process.env.NODE_ENV || 'development',
      },
      logging: {
        level: process.env.LOG_LEVEL || 'info',
      },
    };
  }

  get config(): AppConfig {
    return this._config;
  }

  private getRequiredEnv(key: string): string {
    const value = process.env[key];
    if (!value || value.trim() === '') {
      console.error(`‚ùå CHYBA KONFIGURACE: Povinn√° environment promƒõnn√° ${key} nen√≠ nastavena nebo je pr√°zdn√°!`);
      console.error(`üìù Vytvo≈ôte .env soubor podle .env.example a nastavte spr√°vn√© hodnoty.`);
      console.error(`üîß Aktu√°lnƒõ naƒçten√© environment promƒõnn√© pro eWay-CRM:`);
      console.error(`   EWAY_API_URL: ${process.env.EWAY_API_URL || 'NEN√ç NASTAVENA'}`);
      console.error(`   OAuth2:`);
      console.error(`     EWAY_CLIENT_ID: ${process.env.EWAY_CLIENT_ID || 'NEN√ç NASTAVENA'}`);
      console.error(`     EWAY_CLIENT_SECRET: ${process.env.EWAY_CLIENT_SECRET ? '[NASTAVENA]' : 'NEN√ç NASTAVENA'}`);
      console.error(`     EWAY_REDIRECT_URI: ${process.env.EWAY_REDIRECT_URI || 'NEN√ç NASTAVENA'}`);
      console.error(`   Legacy:`);
      console.error(`     EWAY_USERNAME: ${process.env.EWAY_USERNAME || 'NEN√ç NASTAVENA'}`);
      console.error(`     EWAY_PASSWORD: ${process.env.EWAY_PASSWORD ? '[NASTAVENA]' : 'NEN√ç NASTAVENA'}`);
      throw new Error(`Povinn√° environment promƒõnn√° ${key} nen√≠ nastavena`);
    }
    return value.trim();
  }

  public isProduction(): boolean {
    return this._config.app.nodeEnv === 'production';
  }

  public isDevelopment(): boolean {
    return this._config.app.nodeEnv === 'development';
  }

  /**
   * Urƒç√≠, jakou metodu autentizace pou≈æ√≠t
   */
  private determineAuthMethod(): 'oauth2' | 'legacy' {
    // Nejd≈ô√≠ve zkontrolujeme OAuth2 promƒõnn√©
    if (process.env.EWAY_CLIENT_ID && process.env.EWAY_CLIENT_SECRET) {
      console.log('üîê Pou≈æ√≠v√°m OAuth2 autentizaci s Client Secret fallback');
      console.log('‚ÑπÔ∏è  Pozn√°mka: eWay-CRM podporuje pouze Authorization Code flow, ne Client Credentials flow');
      console.log('‚ÑπÔ∏è  Server pou≈æije Client Secret jako Bearer token pro server-to-server komunikaci');
      return 'oauth2';
    }

    // Pak zkontrolujeme legacy autentizaci
    if (process.env.EWAY_USERNAME && (process.env.EWAY_PASSWORD || process.env.EWAY_PASSWORD_HASH)) {
      console.log('üîê Pou≈æ√≠v√°m legacy autentizaci (username/password)');
      return 'legacy';
    }

    // Chyba - ≈æ√°dn√° autentizace nen√≠ nastavena
    console.error('‚ùå CHYBA KONFIGURACE: Mus√≠te nastavit buƒè OAuth2 nebo Legacy autentizaci!');
    console.error('üìù P≈ô√≠klad .env souboru:');
    console.error('');
    console.error('   # OAuth2 (doporuƒçeno):');
    console.error('   EWAY_CLIENT_ID=v√°≈°-client-id');
    console.error('   EWAY_CLIENT_SECRET=v√°≈°-client-secret');
    console.error('   EWAY_REDIRECT_URI=https://oauth.pstmn.io/v1/browser-callback');
    console.error('');
    console.error('   # NEBO Legacy:');
    console.error('   EWAY_USERNAME=api');
    console.error('   EWAY_PASSWORD=vase-heslo-zde');
    throw new Error('Nen√≠ nastavena ≈æ√°dn√° metoda autentizace pro eWay-CRM');
  }

  /**
   * Z√≠sk√° heslo a automaticky ho p≈ôevede na hash pokud je pot≈ôeba
   */
  private getPasswordValue(): string {
    // Nejd≈ô√≠ve zkus√≠me EWAY_PASSWORD (plaintext)
    const plainPassword = process.env.EWAY_PASSWORD;
    if (plainPassword) {
      console.log('üîê Pou≈æ√≠v√°m plaintext heslo z EWAY_PASSWORD a vytv√°≈ô√≠m MD5 hash');
      return createPasswordHash(plainPassword);
    }

    // Pak zkus√≠me EWAY_PASSWORD_HASH (u≈æ hashovan√©)
    const hashedPassword = process.env.EWAY_PASSWORD_HASH;
    if (hashedPassword) {
      // Ovƒõ≈ô√≠me, zda je to skuteƒçnƒõ hash nebo plaintext
      if (isPasswordHash(hashedPassword)) {
        console.log('üîê Pou≈æ√≠v√°m hashovan√© heslo z EWAY_PASSWORD_HASH');
        return hashedPassword.toUpperCase();
      } else {
        console.log('üîê EWAY_PASSWORD_HASH obsahuje plaintext, vytv√°≈ô√≠m MD5 hash');
        return createPasswordHash(hashedPassword);
      }
    }

    // Chyba - ≈æ√°dn√© heslo nen√≠ nastaveno
    throw new Error('Heslo pro legacy autentizaci nen√≠ nastaveno');
  }
}

export const configService = new ConfigService();
export default configService; 